// See LICENSE.SiFive for license details

package rocketdsptools

import chisel3._
import freechips.rocketchip.config.{Field, Parameters}
import freechips.rocketchip.devices.debug.Debug
import freechips.rocketchip.diplomacy.LazyModule
import freechips.rocketchip.util.GeneratorApp

case object BuildTop extends Field[(Clock, Bool, Parameters) => TopModule[Top]]

class TestHarness()(implicit p: Parameters) extends Module {
  val io = IO(new Bundle {
    val success = Output(Bool())
  })
  
  val dut = Module(LazyModule(new TopWithTLUIntPassthrough).module)
  dut.reset := reset.toBool() | dut.debug.ndreset
  
  dut.dontTouchPorts()
  dut.tieOffInterrupts()
  dut.connectSimAXIMem()
  Debug.connectDebug(dut.debug, clock, reset.toBool(), io.success)
}

//object Generator extends GeneratorApp {
//  val longName = names.configProject + "." + names.configs  
//  generateFirrtl
//  generateAnno
//  generateTestSuiteMakefrags
//  generateROMs  
//  generateArtefacts
//}
